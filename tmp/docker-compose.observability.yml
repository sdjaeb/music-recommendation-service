services:
  #######################
  # Observability Stack #
  #######################

  # cAdvisor: Container metrics collector.
  # Provides container resource usage (CPU, memory, network I/O) to Prometheus.
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true # Required for cAdvisor to access Docker daemon info
    restart: always
    ports:
      - "8083:8080" # cAdvisor UI/metrics
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'

  # Prometheus: Time-series database for metrics collection and storage.
  # Scrapes metrics from various services (e.g., cAdvisor, FastAPI, Spark).
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    restart: always
    ports:
      - "9091:9090" # Prometheus UI
    configs:
      - source: prometheus_yml
        target: /etc/prometheus/prometheus.yml
    command: >-
      --config.file=/etc/prometheus/prometheus.yml
      --web.enable-remote-write-receiver
      --storage.tsdb.path=/prometheus
      --web.enable-lifecycle
      --web.route-prefix=/
      --enable-feature=exemplar-storage
    volumes:
      - prometheus_data:/prometheus
    networks:
      - observability_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:9090/-/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512m'

  # Jaeger: Distributed tracing system.
  # Collects and visualizes traces from instrumented applications (e.g., FastAPI).
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    restart: always
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "16686:16686" # Jaeger UI
    volumes:
      - jaeger_data:/badger
    networks:
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512m'

  # Grafana Alloy: OpenTelemetry Collector distribution for metrics and logs.
  # Can collect, process, and export telemetry data to various backends.
  grafana-alloy:
    image: grafana/alloy:latest
    container_name: grafana-alloy
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
    restart: always
    configs:
      - source: grafana_alloy_config_river
        target: /etc/alloy/config.alloy
    depends_on:
      - prometheus
      - jaeger
      - loki
    ports:
      - "12345:12345"
    networks:
      - observability_network
    privileged: true
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'

  # Loki: Log aggregation system.
  # Stores and queries logs from all services in the platform.
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    ports:
      - "3100:3100" # Loki HTTP listener
    command: -config.file=/etc/loki/local-config.yml
    configs:
      - source: loki_config_yml
        target: /etc/loki/local-config.yml
    volumes:
      - loki_data:/loki
    networks:
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'

  # Promtail: Agent for shipping logs to Loki.
  # Discovers and tails log files from containers and sends them to Loki.
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: always
    command: -config.file=/etc/promtail/promtail-config.yml
    configs:
      - source: promtail_config_yml
        target: /etc/promtail/promtail-config.yml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - loki
    networks:
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '128m'

  # Grafana: Visualization and dashboarding tool.
  # Connects to Prometheus (metrics) and Loki (logs) to create comprehensive dashboards.
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: always
    ports:
      - "3000:3000" # Grafana UI
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/dashboards:/var/lib/grafana/dashboards # This is for actual dashboard JSON files
      - ./grafana_provisioning:/etc/grafana/provisioning:ro # New mount for provisioning files
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
    depends_on:
      - prometheus
      - jaeger
      - cadvisor
    networks:
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s