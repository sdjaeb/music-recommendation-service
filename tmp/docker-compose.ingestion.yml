services:
  ###########################
  # Ingestion Layer         #
  ###########################

  # FastAPI Ingestor: A Python-based API that receives data from external sources
  # and produces it into Kafka topics for real-time processing.
  fastapi-ingestor:
    build:
      context: ./fastapi_app
    container_name: fastapi-ingestor
    restart: always
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY_FILE: /run/secrets/minio_user
      MINIO_SECRET_KEY_FILE: /run/secrets/minio_pass
    secrets:
      - minio_user
      - minio_pass
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./fastapi_app:/app
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    networks:
      - data_platform_network
      - observability_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.connect((\"localhost\",8000))'"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'

  # Webhook Listener: A placeholder service to demonstrate listening for events
  # from MinIO (e.g., new file uploads) to trigger downstream actions.
  webhook-listener:
    build: ./webhook_listener_app
    container_name: webhook-listener
    restart: always
    ports:
      - "3001:8081"
    secrets:
      - minio_user
      - minio_pass
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./webhook_listener_app:/app
    command: ["python", "app.py"]
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5