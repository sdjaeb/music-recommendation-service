services:
  #################################
  # Metadata Management (OpenMetadata)  #
  #################################

  # OpenMetadata PostgreSQL: A dedicated database instance for OpenMetadata's metadata.
  openmetadata-postgres:
    image: postgres:13
    container_name: openmetadata-postgres
    restart: always
    environment:
      POSTGRES_USER_FILE: /run/secrets/om_db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/om_db_pass
      POSTGRES_DB: openmetadata_db
    secrets:
      - om_db_user
      - om_db_pass
    volumes:
      - openmetadata_db_data:/var/lib/postgresql/data
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -d openmetadata_db -U $$(cat /run/secrets/om_db_user)"]
      interval: 15s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512m'

  # OpenMetadata Elasticsearch: The search and indexing engine for the data catalog.
  openmetadata-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.4
    container_name: openmetadata-elasticsearch
    restart: always
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - openmetadata_es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - data_platform_network
    healthcheck:
      test: "curl -s http://localhost:9200/_cluster/health?pretty | grep status | grep -qE 'green|yellow' || exit 1"
      interval: 15s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1g'

  # OpenMetadata Migrate All: A one-off job that runs database migrations to set up the schema.
  openmetadata-migrate-all:
    image: docker.getcollate.io/openmetadata/server:1.7.5
    container_name: openmetadata-migrate-all
    entrypoint: /bin/sh
    command:
      - -c
      - |
        # Set environment variables from secrets before running the migration
        export DB_USER=$$(cat /run/secrets/om_db_user)
        export DB_USER_PASSWORD=$$(cat /run/secrets/om_db_pass)
        exec ./bootstrap/openmetadata-ops.sh migrate
    environment:
      DB_DRIVER_CLASS: org.postgresql.Driver
      DB_SCHEME: postgresql
      DB_HOST: openmetadata-postgres
      DB_PORT: 5432
      OM_DATABASE: openmetadata_db
      ELASTICSEARCH_HOST: openmetadata-elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_SCHEME: http
    secrets:
      - om_db_user
      - om_db_pass
    depends_on:
      openmetadata-postgres:
        condition: service_healthy
      openmetadata-elasticsearch:
        condition: service_healthy
    networks:
      - data_platform_network
    restart: "no"

  # OpenMetadata Server: The main application server and UI for the data catalog.
  openmetadata-server:
    image: docker.getcollate.io/openmetadata/server:1.7.5
    container_name: openmetadata-server
    restart: always
    ports:
      - "8585:8585" # UI port
      - "8586:8586" # Admin port
    environment:
      OPENMETADATA_CLUSTER_NAME: docker-cluster
      DB_DRIVER_CLASS: org.postgresql.Driver
      DB_SCHEME: postgresql
      DB_HOST: openmetadata-postgres
      DB_PORT: 5432
      OM_DATABASE: openmetadata_db
      ELASTICSEARCH_HOST: openmetadata-elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_SCHEME: http
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_USER_FILE: /run/secrets/om_db_user
      DB_USER_PASSWORD_FILE: /run/secrets/om_db_pass
    secrets:
      - om_db_user
      - om_db_pass
    depends_on:
      openmetadata-migrate-all:
        condition: service_completed_successfully
    networks:
      - data_platform_network
      - observability_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8586/healthcheck || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1g'

  # OpenMetadata Ingestion: A service to run metadata ingestion workflows from various sources.
  openmetadata-ingestion:
    image: docker.getcollate.io/openmetadata/ingestion:1.7.5
    container_name: openmetadata-ingestion
    restart: always
    depends_on:
      openmetadata-server:
        condition: service_healthy
    volumes:
      - ingestion-scripts:/opt/openmetadata/examples
    environment:
      OPENMETADATA_SERVER_URL: http://openmetadata-server:8585/api
    networks:
      - data_platform_network
      - observability_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1g'

  #################################
  # Data Lineage (Spline)         #
  #################################

  # ArangoDB: The graph database used by Spline to store lineage information.
  arangodb:
    image: arangodb:3.11.0
    container_name: arangodb
    restart: always
    ports:
      - "8529:8529"
    environment:
      ARANGO_NO_AUTH: 1
    command: >
      arangod --javascript.v8-contexts 1 --server.threads 2
    volumes:
      - arangodb_data:/var/lib/arangodb3
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD-SHELL", "arangosh --server.endpoint tcp://127.0.0.1:8529 --javascript.execute-string \"db._version();\""]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spline DB Init: A one-off job that initializes the Spline schema in ArangoDB.
  spline-db-init:
    platform: linux/amd64
    image: absaoss/spline-admin:0.7.9
    container_name: spline-db-init
    restart: "no"
    entrypoint: >
      tini -g -- bash -c "
        until curl --output /dev/null --silent --get --fail http://arangodb:8529/_admin/server/availability; do
          echo waiting for ArangoDB server to be ready...;
          sleep 5;
        done;
        exec bash ./entrypoint.sh db-init arangodb://arangodb/spline -s
      "
    depends_on:
      arangodb:
        condition: service_healthy
    networks:
      - data_platform_network

  # Spline REST Server: The API that receives lineage data captured by the Spark agent.
  spline-rest-server:
    platform: linux/amd64
    image: absaoss/spline-rest-server:0.7.9
    container_name: spline-rest-server
    restart: always
    ports:
      - "8082:8080"
    environment:
      SPLINE_DATABASE_CONNECTION_URL: 'arangodb://arangodb/spline'
    depends_on:
      spline-db-init:
        condition: service_completed_successfully
    networks:
      - data_platform_network
      - observability_network
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/8080' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512m'

  # Spline UI: The web interface for visualizing the data lineage graphs.
  spline-ui:
    platform: linux/amd64
    image: absaoss/spline-web-ui:latest
    container_name: spline-ui
    restart: unless-stopped
    environment:
      SPLINE_CONSUMER_URL: 'http://${DOCKER_HOST_EXTERNAL:-localhost}:8082/consumer'
    ports:
      - "9090:8080"
    depends_on:
      spline-rest-server:
        condition: service_healthy
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '256m'